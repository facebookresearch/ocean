/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#include "ocean/test/testcv/testdetector/testqrcodes/TestQRCodeEncoder.h"

#include "ocean/base/RandomI.h"
#include "ocean/base/String.h"

#include "ocean/cv/detector/qrcodes/QRCode.h"
#include "ocean/cv/detector/qrcodes/QRCodeEncoder.h"

#include "ocean/io/Base64.h"
#include "ocean/io/Utilities.h"

namespace Ocean
{

namespace Test
{

namespace TestCV
{

namespace TestDetector
{

namespace TestQRCodes
{

using namespace CV::Detector::QRCodes;

TestQRCodeEncoder::FileDataCollection::FileDataCollection(const std::string& filename) :
	filename_(filename)
{
	ocean_assert(!filename_.empty());
}

SharedTestData TestQRCodeEncoder::FileDataCollection::data(const size_t index)
{
	if (index >= size())
	{
		ocean_assert(false && "Invalid index");
		return nullptr;
	}

	IO::Utilities::Buffer buffer;
	if (!IO::Utilities::readFile(filename_, buffer))
	{
		return nullptr;
	}

	if (buffer.empty())
	{
		return nullptr;
	}

	Value value(buffer.data(), buffer.size());

	return std::make_shared<TestData>(std::move(value));
}

size_t TestQRCodeEncoder::FileDataCollection::size()
{
	return filename_.empty() ? 0 : 1;
}

bool TestQRCodeEncoder::test(const double testDuration)
{
	ocean_assert(testDuration > 0.0);

	Log::info() << "---   Test for QR code encoding:   ---";
	Log::info() << " ";

#ifdef OCEAN_USE_TEST_DATA_COLLECTION
	const TestDataManager::ScopedSubscription scopedSubscription = TestQRCodeEncoder_registerTestDataCollection();
#endif

	bool allSucceeded = true;

	allSucceeded = testQRCodeEncoding(testDuration) && allSucceeded;

	Log::info() << " ";
	Log::info() << "-";
	Log::info() << " ";

	allSucceeded = testQRCodeVersionEncodingDecoding() && allSucceeded;

	Log::info() << " ";
	Log::info() << "-";
	Log::info() << " ";

	allSucceeded = testQRCodeFormatEncodingDecoding() && allSucceeded;

	Log::info() << " ";

	if (allSucceeded)
	{
		Log::info() << "QR code encoding test succeeded.";
	}
	else
	{
		Log::info() << "QR code encoding test FAILED!";
	}

	return allSucceeded;
}

#ifdef OCEAN_USE_GTEST

} // namespace TestQRCodes

/**
 * This class implements a simple instance for the GTest ensuring test data collections are registered.
 */
class TestQRCodeEncoder : public ::testing::Test
{
	protected:

		/**
		 * Sets up the test.
		 */
		void SetUp() override
		{
#ifdef OCEAN_USE_TEST_DATA_COLLECTION
			scopedSubscription_ = TestDetector::TestQRCodes::TestQRCodeEncoder_registerTestDataCollection();
#endif // OCEAN_USE_TEST_DATA_COLLECTION
		}

		/**
		 * Tears down the test.
		 */
		void TearDown() override
		{
			scopedSubscription_.release();
		}

	protected:

		/// The subscriptions to all registered data collections.
		TestDataManager::ScopedSubscription scopedSubscription_;
};

TEST_F(TestQRCodeEncoder, QRCodeEncoding)
{
	EXPECT_TRUE(TestDetector::TestQRCodes::TestQRCodeEncoder::testQRCodeEncoding(GTEST_TEST_DURATION));
}

TEST_F(TestQRCodeEncoder, QRCodeVersionEncodingDecoding)
{
	EXPECT_TRUE(TestDetector::TestQRCodes::TestQRCodeEncoder::testQRCodeVersionEncodingDecoding());
}

TEST_F(TestQRCodeEncoder, QRCodeFormatEncodingDecoding)
{
	EXPECT_TRUE(TestDetector::TestQRCodes::TestQRCodeEncoder::testQRCodeFormatEncodingDecoding());
}

namespace TestQRCodes
{

#endif // OCEAN_USE_GTEST

bool TestQRCodeEncoder::testQRCodeEncoding(const double testDuration)
{
	ocean_assert(testDuration > 0.0);

	Log::info() << "QR code encoding test:";

	bool allSucceeded = true;

	const QRCodeVerificationItems verificationItems = TestQRCodeEncoder::loadDataTestQRCodeEncoding();

	ocean_assert(!verificationItems.empty());
	if (!verificationItems.empty())
	{
		RandomGenerator randomGenerator;

		Timestamp start(true);

		do
		{
			const unsigned int randomIndex = RandomI::random(randomGenerator, (unsigned int)(verificationItems.size() - 1));
			const QRCodeVerificationItem& verificationItem = verificationItems[randomIndex];

			QRCode testCode;
			if (!QRCodeEncoder::encodeText(verificationItem.message_, verificationItem.errorCorrectionCapacity_, testCode) || !testCode.isValid())
			{
				allSucceeded = false;
			}

			allSucceeded = testCode.version() == verificationItem.version_
				&& testCode.errorCorrectionCapacity() == (unsigned int)verificationItem.errorCorrectionCapacity_
				&& allSucceeded;

			std::vector<char> modulesString(testCode.modules().size());
			for (unsigned int i = 0u; i < testCode.modules().size(); ++i)
			{
				modulesString[i] = testCode.modules()[i] == 0u ? '0' : '1';
			}

			allSucceeded = std::equal(modulesString.begin(), modulesString.end(), verificationItem.modules_.begin()) && allSucceeded;
		}
		while (Timestamp(true) < start + testDuration);
	}
	else
	{
		allSucceeded = false;
	}

	if (allSucceeded)
	{
		Log::info() << "Validation succeeded.";
	}
	else
	{
		Log::info() << "Validation FAILED!";
	}

	return allSucceeded;
}

bool TestQRCodeEncoder::testQRCodeVersionEncodingDecoding()
{
	Log::info() << "Version encoding/decoding test:";

	bool allSucceeded = true;

	RandomGenerator randomGenerator;

	// Note: QR code versions 1-6 do not have version bit fields, but we're still include those values into this test.

	for (uint32_t version = 1u; version <= 40u; ++version)
	{
		const uint32_t encodedVersion = CV::Detector::QRCodes::QRCodeEncoder::encodeVersion(version);

		if (encodedVersion >> 18u != 0u)
		{
			allSucceeded = false;
		}

		uint32_t decodedVersion;
		if (CV::Detector::QRCodes::QRCodeEncoder::decodeVersionBits(encodedVersion, decodedVersion) == false || version != decodedVersion)
		{
			allSucceeded = false;
		}

		// The encoded version must be recoverable with up to 3 incorrect bits

		uint32_t xorMask = 0u;

		for (unsigned int i = 0u; i < 3u; ++i)
		{
			unsigned int bit;

			do
			{
				bit = RandomI::random(randomGenerator, 17u);
			}
			while (((xorMask >> bit) & 1u) == 1u);

			xorMask |= 1u << bit;
		}

		ocean_assert(xorMask >> 18u == 0u);
		const uint32_t encodedVersionWithErrors = encodedVersion ^ xorMask;

		decodedVersion = 0u;
		if (CV::Detector::QRCodes::QRCodeEncoder::decodeVersionBits(encodedVersionWithErrors, decodedVersion) == false || version != decodedVersion)
		{
			allSucceeded = false;
		}
	}

	if (allSucceeded)
	{
		Log::info() << "Validation successful";
	}
	else
	{
		Log::info() << "Validation FAILED";
	}

	return allSucceeded;
}


bool TestQRCodeEncoder::testQRCodeFormatEncodingDecoding()
{
	Log::info() << "Format encoding/decoding test:";

	bool allSucceeded = true;

	RandomGenerator randomGenerator;

	const CV::Detector::QRCodes::QRCode::ErrorCorrectionCapacity errorCorrectionCapacities[4] =
	{
		CV::Detector::QRCodes::QRCode::ECC_07,
		CV::Detector::QRCodes::QRCode::ECC_15,
		CV::Detector::QRCodes::QRCode::ECC_25,
		CV::Detector::QRCodes::QRCode::ECC_30
	};

	const CV::Detector::QRCodes::QRCodeEncoder::MaskingPattern maskingPatterns[8] =
	{
		CV::Detector::QRCodes::QRCodeEncoder::MP_PATTERN_0,
		CV::Detector::QRCodes::QRCodeEncoder::MP_PATTERN_1,
		CV::Detector::QRCodes::QRCodeEncoder::MP_PATTERN_2,
		CV::Detector::QRCodes::QRCodeEncoder::MP_PATTERN_3,
		CV::Detector::QRCodes::QRCodeEncoder::MP_PATTERN_4,
		CV::Detector::QRCodes::QRCodeEncoder::MP_PATTERN_5,
		CV::Detector::QRCodes::QRCodeEncoder::MP_PATTERN_6,
		CV::Detector::QRCodes::QRCodeEncoder::MP_PATTERN_7
	};

	for (unsigned int ecc = 0u; ecc < 4u; ++ecc)
	{
		for (unsigned int m = 0u; m < 8u; ++m)
		{
			const uint32_t encodedFormat = CV::Detector::QRCodes::QRCodeEncoder::encodeFormat(errorCorrectionCapacities[ecc], maskingPatterns[m]);

			if (encodedFormat >> 15u != 0u)
			{
				allSucceeded = false;
			}

			CV::Detector::QRCodes::QRCode::ErrorCorrectionCapacity decodedErrorCorrectionCapacity;
			CV::Detector::QRCodes::QRCodeEncoder::MaskingPattern decodedMaskingPattern;

			if (CV::Detector::QRCodes::QRCodeEncoder::decodeFormatBits(encodedFormat, decodedErrorCorrectionCapacity, decodedMaskingPattern) == false || errorCorrectionCapacities[ecc] != decodedErrorCorrectionCapacity || maskingPatterns[m] != decodedMaskingPattern)
			{
				allSucceeded = false;
			}

			// The encoded format must be recoverable with up to 3 incorrect bits

			uint32_t xorMask = 0u;

			for (unsigned int i = 0u; i < 3u; ++i)
			{
				unsigned int bit;

				do
				{
					bit = RandomI::random(randomGenerator, 14u);
				}
				while (((xorMask >> bit) & 1u) == 1u);

				xorMask |= 1u << bit;
			}

			ocean_assert(xorMask >> 15u == 0u);
			const uint32_t encodedFormatWithErrors = encodedFormat ^ xorMask;

			if (CV::Detector::QRCodes::QRCodeEncoder::decodeFormatBits(encodedFormatWithErrors, decodedErrorCorrectionCapacity, decodedMaskingPattern) == false || errorCorrectionCapacities[ecc] != decodedErrorCorrectionCapacity || maskingPatterns[m] != decodedMaskingPattern)
			{
				allSucceeded = false;
			}
		}
	}

	if (allSucceeded)
	{
		Log::info() << "Validation successful";
	}
	else
	{
		Log::info() << "Validation FAILED";
	}

	return allSucceeded;
}

TestQRCodeEncoder::QRCodeVerificationItems TestQRCodeEncoder::loadDataTestQRCodeEncoding()
{

#ifdef OCEAN_USE_TEST_DATA_COLLECTION

	const SharedTestDataCollection dataCollection = TestDataManager::get().testDataCollection("qrcodeencoder_encoding_decoding_1000");

	if (!dataCollection || dataCollection->size() != 1)
	{
		ocean_assert(false && "Data collection not registered!");
		return QRCodeVerificationItems();
	}

	const SharedTestData data = dataCollection->data(0);

	if (!data || data->dataType() != TestData::DT_VALUE || !data->value().isBuffer())
	{
		ocean_assert(false && "Invalid data!");
		return QRCodeVerificationItems();
	}

	size_t size = 0;
	const void* buffer = data->value().bufferValue(size);

	if (buffer == nullptr || size == 0)
	{
		ocean_assert(false && "Invalid data!");
		return QRCodeVerificationItems();
	}

	return loadCSVTestQRCodeEncoding(buffer, size);

#else // OCEAN_USE_TEST_DATA_COLLECTION

	// A minimal set of vetted verification data in case not test collection is used

	const QRCodeVerificationItems verificationItems =
	{
		// clang-format off
		QRCodeVerificationItem(5u, QRCode::ECC_15, QRCodeEncoder::MP_PATTERN_2, "4574146228657953430647376773115645215003531044729670643079265205410564523673912272438406565247631373872895633208369827667400087205599330117927195894184549200161979669824540894651248332944710514567933415", "1111111001001101100001101111001111111100000100101001001100010011110100000110111010111010011000101110101010111011011101010001010111000001010101011101101110101011000110011101010110101110110000010110110000001001100010010000011111111010101010101010101010101111111000000001011000011101011110000000000010111110011011101011111011010011111001011100100111011110101001010001100110111100110010110110001100001100101101110100001000001011111100011110011101001110011110101011110111000001000000011010110001110011101000101100101010110101011111010100100010001001000010011001011010101110011010110001111101110011001001110010101010001010111110101110100111100000100011000001010011000100110100011101101001100011001011000111000101000011100101111100101000000111100101110010001010010010101011101111010101010000000110111101111101000000100100101100101001101001010110001100110110100000100111100001001101011001001001111100111101110000001011001010110110010110100010001101011101111011011101011110110110010000110111111110001000100001010000010101001101011010000000101000101110101110000010001000011011111000100000000110111100110001100101000111011111111000110010000011101111101011001100000101010000111100100010010001000010111010100110100000001110001111101111011101010100111000110000001011111010101110101101001001101101011001101010110000010001111011010010010010011001111111111011000000001010110101101000001"),
		QRCodeVerificationItem(13u, QRCode::ECC_07, QRCodeEncoder::MP_PATTERN_2, "^h(U](nn]C`-!-4!uV:<ZC%N0CdcQKnnXoTZBf}Q4OR:l-1Qf )1,$J`SyN-fb_HFv.C.EdP$wYQ^$LWmZefNs4%qSTet.3~:brS&&+UM62ko41^asGZB}O&Mz,0! :Q~.w pTN;aM<n$qBGM,g%u98>)+,pa*r%d@ic<+cn}vm+l6*?(u6[0fQn%*yO#T8($1,6G#d>:CR-/4Kenqc]eVn;*x2kQOkuyUT*g#NsI=xf$c^T*2lZd;c)S%|CdvWOF@yeYHox4%lpr}eTZrkz*h xxHtPrn!9QRa|_wnbPKG$wV-:6@,lB?%+<@v4Po@~#^)5mD$_Kv|YFV>wSz^:^_`qOOuo@su}#8B`~jtkqYAdgNY5|MKTrb?vCAc`EtB|:O]QiPIz7VKJmqaT&b
		QRCodeVerificationItem(1u, QRCode::ECC_25, QRCodeEncoder::MP_PATTERN_3, "05494670797013975107969", "111111100100001111111100000101001101000001101110101011101011101101110100110001011101101110100011001011101100000100000101000001111111101010101111111000000000110000000000011101100001100000110010001000110011011001110100111110101011111110101000001100101101111011101000100110100000000001011110111101111111100111101000101100000101010101101010101110100010001011011101110101100011010010101110101001001111000100000101101101010111111111100101110011110"),
		QRCodeVerificationItem(6u, QRCode::ECC_07, QRCodeEncoder::MP_PATTERN_6, "y!uWIXYp+&d.<v}3^H{@|g$?ET}XLYL0BE-,(RcZrmg]vqD(;Y ^r=.4/@XsU[p@l$D(9wSI[G/4`YwCsN%Fv1k% fY~In?uscCI>H&h(lv3x3h$GNtEj1)+n*:Y7il*ja
		QRCodeVerificationItem(19u, QRCode::ECC_07, QRCodeEncoder::MP_PATTERN_7, "@3qeYR{TfD_1;FlWo/E8mQ^X~Uq&;I2xPzE*yuLP3U)hdIW=VO}(lZW1,O_&4/%Q{D[kfys{$Ai557/=*O1^+j.&oyL4H30nbN~FkCd@/<=;p|NF*(hz^__K2i`% Fq[e&/6E]ann@{-D6At&%>Z|jI~!k6-+?>%-m)+e15)>zOKopRe,mQ[cJOpyGl=K: FIeYL!H`!LwSlC_*1W]M!xrJdyu|K+rw/y_Z<<R5d=FzG}tLnoM`YWn3xVN{NcQJADZ^Yqs?J!Am28k(@!dB8z3gAn)ys9EAo&/?NY>r*HzI^-9X[[^Dx1(Hn^[riqIvZkA;#i8s`McK.77hUbb1m^_^wAX~p/TURpy:Igw(q4ck.S/{uu,3GBP^|eKTvi%N@G#0CGO6jGyj8hBUD!FB<2BWiZ/P$L@%z1CU]Dqm$d>UJ16@]2EK#a<B6MTy]|b-##}yvrG:*7sZ`xRxJ8umS[FwP72#`TO1QAx|S(D &*wQ21jq|C}R?@%uNx*%zAcO8*VEY[nK0LNz5Dq6D{`lh~i_j3+eXFCNJ{PRUGJg|RhYh[~BVoeCCy5TE[&#!C`l#zELi7T_~tt1 <(uMw0>*O$E%m(i()UYzlWz>Ra|IAy]?=HHx@v%,nhMU42kqZhd Z&A{k.-R 1FFR/42w0[@T}XEG?DU&Q=ey,n2M[=!<zLZ3Mbtc~3l8AcK>~#jm7@0E){Yp FZkk+!J>,VrixrL5kAa0eqEHh#)!o.4*lhhxS]TNE1Yl
		QRCodeVerificationItem(8u, QRCode::ECC_07, QRCodeEncoder::MP_PATTERN_3, "202906925165377385583654766016988929216837392605890080039043765393269081832810119976975012843262246557042308816211435335863814340326654619873539587708450031237832830420088252823256655670663761737323524215572840429808678889483828581322135406512037980158699209050077056085136180821938653830928137540517707649096329667406542851019522632948555314726740242381028829027748140475396973157804424061242758619722222332689465922646563679412312759303784724974291229286048", "1111111011000011110110110011000010001100101111111100000100000011100001000001000101101011110100000110111010110000001111101001100111000010011010111011011101010101000100001000100111101000001001011101101110101000110010011111111001000101010000101110110000010001000101010111000100111110111100010000011111111010101010101010101010101010101010101111111000000000110111001111110001110000001100100000000011110010111110100101111111100001000101100100111011100100110100001010000100010110100001011101010100001010110000010101101011100011110010001010001101110010101111101010011010000100001111001010001001101000011010011110000100001001110000101100110101111001011000101100001101101111101001111011100101000011000110010011110010101000101000010101010101001010001000010010010100010111110100011100110001111010011011110100001001101111010011110101011100101001111000000101001110100010100011111000010111101000011010111010010100101110000011011010100000101100011000000010110101000011001011101010100101000100100101011111001101110011101111111111101101011000111100011000010111001100001011111011001001001110111000110011111011100000010111111101000110000011111001001101000101111111111001000101100111110101000100011011101011011101100110101010000101101111101010010110110001000000110101010001111100101000110001101001011111101010111000111111110111111110111111110010100010000100000010001101100010010111100000111101000010111101010111011101000100011001010011001101101100100011001111110000110011010110101000110011011010101110101110110010011011110110110000000110100010000011001111111110110101001100011100001001111010100111100110110100100101110101000101110011111111011000110001011000110101001001001011001101010001100110110111111001110100110111000101001000010011011011101010000010011011011010001001001111001001101000001010101101100100111101110011001011001111011100101010101001000010001100000011000010000000101001000111100000000111010000110101010101110100101110111000100101100100011011010010110101001011011000111000110101110001001111111000101011100011111011000000000101001101101111000101000010001011000111101111111000110101110101101010000000010011101011111100000100100110110011110001111001001110110001101010111010000001101011001111110110010000111111101101011101010001000011100110110010110000111010010010101110101100101000010011110100100000011010000110010000010110000110101111001010101011100001010100101111111011101111001001011110111111001010001101101"),
		QRCodeVerificationItem(17u, QRCode::ECC_07, QRCodeEncoder::MP_PATTERN_4, "NZktBrW_5F-m6y1Zgd%)Yxm-raLsCdZ*vh%6fm=|/_R5f/_~ h@MErW}XI5[fuP>Jz.XqUeEWB .y*h&hCJ52xQl`]B* P[N5o]vNre{__?81?s}/h!zRGB3#HmX/G9)Up$r::ANT.`f@h(mh.W U.X`%{NInBk9q0t4zrqP2(6w}OPa=%_6+H]Fp,xt<JME{`TxV(%QwdX+7w:wlkN9b0N?jEzI949)C[,(N{_ NsK$yRc|K[A>`NA<liA^VCRk9GWF7jP^/{-*fasG^>sut)qUgj6],t_EBSbin<EJ&WwglmE/=?P-A9)b7/1k|o_9T Wtp4FmPYe?ck?1{+py~]lWdpSPIEB[S7@;`OHM^%a`+-JiE8H@/|#]t@XWc(e|jELt *`8cL*nXXQXO@ >zhA]sT2L{g/&crznm7/c@6L8fCRvefgzAcq8uR!LW`kZ.FC_/U:.ta}>/YAor=hW-,**]OkGJP!rZiy)[Bag/a3oZ,B5:],[p{rRJb}>Bib2**fIT+YPY+aa7gVQDB3pNgzq4ZCWsRVzgi!rQKJP$im5k6D$%1htd`8O)J8ZUTE`7wL:JpAsu ^SEW vrrqzJmoYR[M(f9=z&pg}*4}r
		QRCodeVerificationItem(4u, QRCode::ECC_07, QRCodeEncoder::MP_PATTERN_1, "~(k)prtoSH^ ZKyIa93vM(_=>k]}QSJhx{g*etB{(/~;vzXh]K7JHYomDxHON-|gg
		QRCodeVerificationItem(14u, QRCode::ECC_07, QRCodeEncoder::MP_PATTERN_3, "4750283800069236583353148986857195946876528590039014208886379953105892033695263063665963280409539999266125246952102348036531681992532242691742405736867698012611497620734762031194102339359757894734407688333224486116813027142862547664245971200083625822916849571650116745245641102994235897742364581171656354432903202522069308417705214972647834073268078224097892110563632614633246913323705159520123284861551957925353123195622710620923320562672954244247590689644743067726353813012463538599151196715192882012063751258654731202152189556521403490110974151635679795039194578917233316671213343983522614361666625233099902277040908386749447839002934540949810407520159604087034725904160860483262533483927741805051389365310112317502095337680457308401369825278520778088642745245367083547006769789219560013535101199653963540900230524884855622064392214282636846092542471013363858494166430089024092965416947339406761968057390358582909569663668460809070537447432000684073348461717167282918459056556191937355431271271602752335428002345700739897572039624353997614525517004", "1111111010100001100111001111001011011111010001010110100001010110101111111100000100101100010000010110001011010100111000010110111001100011000100000110111010110001010111001011001110010010101011001011100111110001000010111011011101010011011111011101011001001011011001101111001101010011111001011101101110101100100001100000111111000010101100001111111100000011000110101110110000010011111111000100110001010001100001001100010100111110011100010000011111111010101010101010101010101010101010101010101010101010101010101111111000000000100100101001001100010011101111101101000111001101101111010000000011110010110110100101101111111101010010000110111111011110010110101100111011110100101100011111010011010001001110011000011101010111010110101010000111101100110111010111101001010011011011010101001010011110111001001011101000101100000111010000000101111000110100011110110010101000101011111000011111000011001011110010111000110100111110010110010111000101000011100000100110010000101010101110100000111001010000000011110111011000001111000111111110100101100110100010110011001010000011010001000010100011011101011001111101110111100110111010111111000111110111111000101101011101011000110101001111111111000011111000111101101110100111001001110000001101001000010100100101100100111111000110110010011010111000101100101101011011001001000100110111101011010001011010001111001100100001101011010111001010011001100101000100000000100010001011110001111010111000010011001010011111000000101100101100110111110000011111001101001011111000000011101100110001011000011010111000001110000111111010010101011001001100001010100101001010111011100010001100101110110111110101110101000000100001100101010010111000101111100010011110001010011101000100001011000111100001000010010111010111110001011001101110100001110111000001111110101010011101101111111000100011010111111000101001101011111111110011110001111110011000111100010101110000001011000111111110010111010001110010111010101000010001101110101001010011011001101011110010011101101010110110000100011111111001101001000110111000010001010001000000110101111100011000000011111110001110100101111110101010011000101111110011011010010111111000011100000100101110000000101001010010010101001101101100100110000011110101000110101100100110001110111110111101000100100000001100010001010111000000111000100001011101010110000001011101011100111100110011011001010101001010100101011111101111001111101101000010101100101110000001010111101111101001010111100110101000000011000101000001100110010011011101110000101000000000100000111110101111110100001010001011010111101001011011001111000011111010001101101111001001011110110001000101110100110101100111101001011000111001110010001010011111011000111001101111111001101110101111000101100110100100000100011000000000000101101111001010001111010010000100001000010001111000101010011111110111011100001101010001100000101001011101111111100000011111010101010101111010101000100111010010110001001011100000010111111001001000000010101010011011101000010111011100001101010110101001000101111111001110010001101100001000101001100001000101110111011010101100111000000010010111010001001101011011011010000010001101111011011010110101010000000010000011001010011011010111101001100111101100110110001010000100000011010010111001010011011111101001101111101001011111000111111110111001110001111111011000010011011111100110100100011111111101010001000101011010011101010001000100011100100100011010000110101001010001101011101010011011001010111010101000111011111010101000011011000110011101001010110001111011000100100100010001101110100101000111111110111111111110010000101111101100001101010111111100001100000000111111101111101000011111010110111011011101011001010101001111101010101110000011111100001011100100111001110101010001000000000010101100100010100100011011101110010100100001010001010100011110010111100010011111110110010101001000001100011001101001010101111100010000101011010001100110011100011011011101100100001110100111101111001000111111010000110110001110110100111111101010010001110001011001000100010101010111010101011110000100011100111100011100110011000000001010100101001110000001101110000011110010011111000100000000100001100011001011010001011100010111101001111000111010100111110000111111001010010000111100010111110001101010110110100010101000111000100001011100000110110101100101100000111010011011110001111101110001101111000111001011011000000011111101000011111110110010110111110111100011111100100101101101111101100111001010001101111111100010001101011100101011101101001110111001001011011001110001100001001010000011101111110110010000111001000010001100110111111010001111010110001100111000100100110010110001110110011000001010011001001100010110001100011010011000101011100111101001011111110101111111101111110111001101100010110000110000100010111111111001001111011111100010101001001111111111100000000110110010000000110001000010110000010100010100100010001101000110001111111000011110111001101010100110111101101110101011110110011111101010001100000100011001000110001100010110100101100011000100010110101011110001110010111010000100111100000111111010101111101011111110000011001001001111100111011101010111011000111011110011101100011100001101101011101100000111101101101110101000110001011011000010011101001111010000110010100000110010000010010000010110110000000111100011011111001001110010101011110011000010111100101111111010010101000101001011100100110000100001001101011101101111111110101"),
		QRCodeVerificationItem(10u, QRCode::ECC_07, QRCodeEncoder::MP_PATTERN_2, "136678854673494652339672532001915728796254577209375419776262107739674219172912766241656490973724418457932150330635537270776826894823446396317585621574684772519376258905129156523244045550603897881902682360481543428632764913518942224472037327700619960996558613970581743744612404673272184084866570182599098312619598395194792657475468928334870701278074694213764355074157367111490209893932024084431829592811046398808098472964437943586362909229645194788153414885482790636002869348686393903216129556571424707124659422957736014018479038889156685808779482682097541798020429449014819968970939670391896054696790730511053314387407796507", "111111100001110100010010100111010010001000101111001111111100000101010010100011001011011010010011101110001001000001101110100110001111111000100001100111000111100011001011101101110101011000100110000110110010010000110010101001011101101110100010101011000100101111110110110001000001001011101100000101100011110110110011000111000110101000010001000001111111101010101010101010101010101010101010101010101111111000000000101000010100001111000110010101000001111100000000111110111001011000100001101111101110100101001101110101010011010010110110100000110010101011010110111100100110010101001101110011000111011010110111110101111001011000100010011111001010000110010011000100110000010111111000100011100000101010101000000101000110101000110010101001111000110110001111111001101110010101000101001100111011100111010110110010000101100101101111110110010111011100001101101110100110111000100010010100100100111000011101101001101000010111100010100101101111100100000010010100010111101111001001010001111010110011001101001110000110110001000111001111010101111111011100100011111100000010100010101111101100010100101110101001110011000101100111001011110101111110111110010111011000110011101000111000000110001110010100000001001011100110000110101010101100101111100001110011011010100001101010111001010000100101101001001001011000000110101100011000110111100111111011000110101111010110111101010110100110100000100001011101101000111000010111101011001100111110001111000010000000011000001100111101011101110011011000110000001001111100110111111010101100101000111111101011110110110010111110011001010001110011111110011001000111010000101110001100011001011010101001010100111010001010100010111001110101101011100110110001111111011110100111000101101001111010010100010101100111111110000100010010111111110000101111111111111110010000010001010110011110010111010011111100000000000011100111010010100110111010000110000101001011111111001010110010110111001010101010101001011001100000011101010101110110110000010100100010110010010110101000101010000100010101101010110000101001101100110001110100110111011001000011000100000100111010101100010101000101101110011100011100111110110101101111110010100110010000011111111101110011111000101001010000110111100111010111100001110111001110111101100011011010100110000000111011011100011010000101011111111001000001000011000000111010101001110000000001101101001110111011110001010100011001100000111100000111110111110000110110011100111101100001100010001011011000111111101100000100011101011001110100100000111101110001011011101111110101011010010101010000111000100101010111001101110001010111100001101001110100000010000001011001100101000111111001001101010000111001111110101001100101101111110101100010000100000010001100100100100111110011011100000011011110111100100100011110000101010010000000100001000110111001101111110100110011001110111111101000000001011111111011011111000101100111010001110100011111111111101111010111101110001010111010010110101111101010110100000100101101011110111111000101101000100111100100011010101110101000101001111100101111111100011011110001111110011101110101111111100001110100110110001111011000100010000101101110101111101001011001000010100111010101111111100100100100000101000000100111011010000101011110111001101001111010111111101101000110000110110111000010110011110111001110100"),
		// clang-format on
	};

	ocean_assert(verificationItems.empty() == false);
	return verificationItems;

#endif // OCEAN_USE_TEST_DATA_COLLECTION
}

TestQRCodeEncoder::QRCodeVerificationItems TestQRCodeEncoder::loadCSVTestQRCodeEncoding(const void* buffer, const size_t size)
{
	ocean_assert(buffer != nullptr && size != 0);

	if (buffer == nullptr || size == 0)
	{
		ocean_assert(false && "Invalid data");
		return QRCodeVerificationItems();
	}

	// Tokenize the network data (split into lines, delimiter: \n)

	QRCodeVerificationItems verificationItems;

	size_t start = 0;
	const char* const bufferData = (const char*)(buffer);

	while (start < size)
	{
		size_t end = start;
		while (end < size && bufferData[end] != '\n')
		{
			end++;
		}

		ocean_assert(start <= end && end <= size);

		if (end > start && bufferData[start] != '#')
		{
			const std::string line = std::string(bufferData + start, end - start);
			ocean_assert(line.empty() == false);

			QRCodeVerificationItem verificationItem;
			if (convertCSVToQRCodeVerificationItem(line, verificationItem) == false)
			{
				ocean_assert(false && "The format of input data seems to be corrupted.");
				return QRCodeVerificationItems();
			}

			verificationItems.emplace_back(std::move(verificationItem));
		}

		start = end + 1u;
	}

	return verificationItems;
}

bool TestQRCodeEncoder::convertCSVToQRCodeVerificationItem(const std::string& lineCSV, QRCodeVerificationItem& verificationItem)
{
	if (lineCSV.empty() || lineCSV[0] == '#')
	{
		return false;
	}

	typedef std::unordered_map<std::string, QRCode::ErrorCorrectionCapacity> TokenStringToErrorCorrectionCapacityMap;

	const TokenStringToErrorCorrectionCapacityMap tokenStringToErrorCorrectionCapacityMap =
	{
		std::make_pair(std::string("ECC_LOW_7"), QRCode::ECC_07),
		std::make_pair(std::string("ECC_MEDIUM_15"), QRCode::ECC_15),
		std::make_pair(std::string("ECC_QUARTILE_25"), QRCode::ECC_25),
		std::make_pair(std::string("ECC_HIGH_30"), QRCode::ECC_30)
	};

	typedef std::unordered_map<std::string, QRCodeEncoder::MaskingPattern> TokenStringToMaskingPatternMap;

	const TokenStringToMaskingPatternMap tokenStringToMaskingPatternMap =
	{
		std::make_pair(std::string("MASKING_PATTERN_0"), QRCodeEncoder::MP_PATTERN_0),
		std::make_pair(std::string("MASKING_PATTERN_1"), QRCodeEncoder::MP_PATTERN_1),
		std::make_pair(std::string("MASKING_PATTERN_2"), QRCodeEncoder::MP_PATTERN_2),
		std::make_pair(std::string("MASKING_PATTERN_3"), QRCodeEncoder::MP_PATTERN_3),
		std::make_pair(std::string("MASKING_PATTERN_4"), QRCodeEncoder::MP_PATTERN_4),
		std::make_pair(std::string("MASKING_PATTERN_5"), QRCodeEncoder::MP_PATTERN_5),
		std::make_pair(std::string("MASKING_PATTERN_6"), QRCodeEncoder::MP_PATTERN_6),
		std::make_pair(std::string("MASKING_PATTERN_7"), QRCodeEncoder::MP_PATTERN_7)
	};

	// Split current line at ','

	std::vector<std::string> tokens;
	std::string::size_type begin = lineCSV.find_first_not_of(' ');

	while (begin < lineCSV.size())
	{
		const std::string::size_type end = lineCSV.find(',', begin);
		const std::string token = lineCSV.substr(begin, end - begin);

		if (token.empty() == false)
		{
			tokens.push_back(token);
		}

		if (end == std::string::npos)
		{
			break;
		}

		begin = end + 1;
	}

	if (tokens.size() != 5)
	{
		ocean_assert(false && "The file data is invalid");
		return false;
	}

	// Token 1: version

	ocean_assert(tokens[0].empty() == false);

	int versionSigned = -1;
	if (String::isInteger32(tokens[0], &versionSigned) == false || versionSigned < 0)
	{
		ocean_assert(false && "The format of the input data seems to be corrupted.");
		return false;
	}

	const unsigned int version = (unsigned int)(versionSigned);

	if (version == 0u || version > 40u)
	{
		ocean_assert(false && "The format of the input data seems to be corrupted.");
		return false;
	}

	// Token 2: error correction level

	const TokenStringToErrorCorrectionCapacityMap::const_iterator errorCorrectionCapacityIter = tokenStringToErrorCorrectionCapacityMap.find(tokens[1]);

	if (errorCorrectionCapacityIter == tokenStringToErrorCorrectionCapacityMap.end())
	{
		ocean_assert(false && "The format of the input data seems to be corrupted.");
		return false;
	}

	const QRCode::ErrorCorrectionCapacity errorCorrectionCapacity = errorCorrectionCapacityIter->second;

	// Token 3: masking pattern

	TokenStringToMaskingPatternMap::const_iterator maskingPatternIter = tokenStringToMaskingPatternMap.find(tokens[2]);

	if (maskingPatternIter == tokenStringToMaskingPatternMap.end())
	{
		ocean_assert(false && "The format of input data seems to be corrupted.");
		return false;
	}

	const QRCodeEncoder::MaskingPattern maskingPattern = maskingPatternIter->second;

	// Token 4: raw message (base64-encoded)

	IO::Base64::Buffer buffer;

	if (IO::Base64::decode((unsigned char*)(tokens[3].c_str()), tokens[3].size(), buffer) == false)
	{
		ocean_assert(false && "The format of input data seems to be corrupted.");
		return false;
	}

	const std::string message = std::string((char*)buffer.data(), buffer.size());
	ocean_assert(message.size() == buffer.size() && message.empty() == false && message[0] != '\0');

	// Token 5: modules of the QR code as a string consisting of ones and zeros

	if (tokens[4].size() != QRCode::modulesPerSide(version) * QRCode::modulesPerSide(version))
	{
		ocean_assert(false && "The format of input data seems to be corrupted.");
		return false;
	}

	verificationItem = QRCodeVerificationItem(version, errorCorrectionCapacity, maskingPattern, message, /* modules */ tokens[4]);

	return true;
}

#ifdef OCEAN_USE_LOCAL_TEST_DATA_COLLECTION

TestDataManager::ScopedSubscription TestQRCodeEncoder_registerTestDataCollection()
{
	std::string absolutePath = "";
	ocean_assert(!absolutePath.empty());

	const std::string filename = absolutePath + "/encoding_decoding_data/encoding_decoding_data_1000.csv";

	return TestDataManager::get().registerTestDataCollection("qrcodeencoder_encoding_decoding_1000", std::make_unique<TestQRCodeEncoder::FileDataCollection>(filename));
}

#endif // OCEAN_USE_LOCAL_TEST_DATA_COLLECTION

} // namespace TestQRCodes

} // namespace TestDetector

} // namespace TestCV

} // namespace Test

} // namespace Ocean
