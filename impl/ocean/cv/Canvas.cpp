/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#include "ocean/cv/Canvas.h"

namespace Ocean
{

namespace CV
{

bool Canvas::Comfort::point(Frame& frame, const Vector2& position, const PixelCenter pixelCenter, const unsigned int size, const uint8_t* value)
{
	ocean_assert(frame.isValid());
	ocean_assert(size % 2u == 1u);
	ocean_assert(pixelCenter == PC_TOP_LEFT || pixelCenter == PC_CENTER);

	if (frame.dataType() == FrameType::DT_UNSIGNED_INTEGER_8 && frame.numberPlanes() == 1u)
	{
		if (pixelCenter == PC_TOP_LEFT)
		{
			switch (size)
			{
				case 1u:
					return Canvas::point<1u, PC_TOP_LEFT>(frame, position, value);

				case 3u:
					return Canvas::point<3u, PC_TOP_LEFT>(frame, position, value);

				case 5u:
					return Canvas::point<5u, PC_TOP_LEFT>(frame, position, value);

				case 7u:
					return Canvas::point<7u, PC_TOP_LEFT>(frame, position, value);

				case 9u:
					return Canvas::point<9u, PC_TOP_LEFT>(frame, position, value);

				case 11u:
					return Canvas::point<11u, PC_TOP_LEFT>(frame, position, value);

				case 13u:
					return Canvas::point<13u, PC_TOP_LEFT>(frame, position, value);

				case 15u:
					return Canvas::point<15u, PC_TOP_LEFT>(frame, position, value);

				default:
					ocean_assert(false && "Invalid size!");
					return false;
			}
		}
		else if (pixelCenter == PC_CENTER)
		{
			switch (size)
			{
				case 1u:
					return Canvas::point<1u, PC_CENTER>(frame, position, value);

				case 3u:
					return Canvas::point<3u, PC_CENTER>(frame, position, value);

				case 5u:
					return Canvas::point<5u, PC_CENTER>(frame, position, value);

				case 7u:
					return Canvas::point<7u, PC_CENTER>(frame, position, value);

				case 9u:
					return Canvas::point<9u, PC_CENTER>(frame, position, value);

				case 11u:
					return Canvas::point<11u, PC_CENTER>(frame, position, value);

				case 13u:
					return Canvas::point<13u, PC_CENTER>(frame, position, value);

				case 15u:
					return Canvas::point<15u, PC_CENTER>(frame, position, value);

				default:
					ocean_assert(false && "Invalid size!");
					return false;
			}
		}
		else
		{
			ocean_assert(false && "Invalid pixel center!");
			return false;
		}
	}

	ocean_assert(false && "Invalid frame type!");
	return false;

}

Canvas::Font::Character::Character()
{
	static_assert(sizeof(data_) == 2 + 32, "Invalid data type!");
	memset(data_, 0x00, sizeof(data_));
}

Canvas::Font::Character::Character(const Frame& frame, const uint8_t* color) :
	Character()
{
	ocean_assert(frame.isValid());
	ocean_assert(color != nullptr);
	ocean_assert(frame.width() <= 16u && frame.height() <= 16u);
	ocean_assert(FrameType::formatIsGeneric(frame.pixelFormat()));

	if (frame.width() > 16u || frame.height() > 16u || !FrameType::formatIsGeneric(frame.pixelFormat()) || frame.dataType() != FrameType::DT_UNSIGNED_INTEGER_8)
	{
		return;
	}

	ocean_assert(frame.numberPlanes() == 1u);

	const unsigned int channels = frame.channels();

	data_[0] = uint8_t(frame.width());
	data_[1] = uint8_t(frame.height());

	uint8_t* characterData = data_ + 2;
	unsigned int bitCounter = 0u;

	for (unsigned int y = 0u; y < frame.height(); ++y)
	{
		for (unsigned int x = 0u; x < frame.width(); ++x)
		{
			ocean_assert(characterData < data_ + 2 + 32);

			const uint8_t* pixel = frame.constpixel<uint8_t>(x, y);

			const bool activePixel = memcmp(pixel, color, channels) == 0;

			if (activePixel)
			{
				*characterData = uint8_t(*characterData | (1u << bitCounter));
			}

			if (++bitCounter >= 8u)
			{
				bitCounter = 0u;
				++characterData;
			}
		}
	}
}

Frame Canvas::Font::Character::frame(const FrameType::PixelFormat pixelFormat, const uint8_t* foregroundColor, const uint8_t* backgroundColor) const
{
	ocean_assert(isValid());
	ocean_assert(FrameType::formatIsGeneric(pixelFormat));
	ocean_assert(FrameType::dataType(pixelFormat) == FrameType::DT_UNSIGNED_INTEGER_8);

	ocean_assert(foregroundColor != nullptr && backgroundColor != nullptr);

	Frame result(FrameType(width(), height(), pixelFormat, FrameType::ORIGIN_UPPER_LEFT));

	const unsigned int channels = result.channels();

	uint8_t* frameData = result.data<uint8_t>();
	ocean_assert(result.paddingElements() == 0u);

	for (unsigned int n = 0u; n < result.pixels(); ++n)
	{
		for (unsigned int c = 0u; c < channels; ++c)
		{
			frameData[c] = backgroundColor[c];
		}

		frameData += channels;
	}

	if (!paint(result, 0, 0, foregroundColor, nullptr))
	{
		ocean_assert(false && "This should never happen!");
		return Frame();
	}

	return result;
}

bool Canvas::Font::Character::paint(Frame& frame, const int left, const int top, const uint8_t* foregroundColor, const uint8_t* backgroundColor) const
{
	ocean_assert(frame.isValid() && frame.pixelOrigin() == FrameType::ORIGIN_UPPER_LEFT);
	ocean_assert(FrameType::formatIsGeneric(frame.pixelFormat()));
	ocean_assert(frame.dataType() == FrameType::DT_UNSIGNED_INTEGER_8);

	if (!frame.isValid() || frame.pixelOrigin() != FrameType::ORIGIN_UPPER_LEFT || !FrameType::formatIsGeneric(frame.pixelFormat()) || frame.numberPlanes() != 1u || frame.dataType() != FrameType::DT_UNSIGNED_INTEGER_8)
	{
		return false;
	}

	const unsigned int characterWidth = width();
	const unsigned int characterHeight = height();

	const unsigned int channels = frame.channels();

	const uint8_t* characterData = data_ + 2;
	unsigned int bitCounter = 0u;

	for (unsigned int y = 0u; y < characterHeight; ++y)
	{
		const unsigned int yFrame = (unsigned int)(top + int(y));

		for (unsigned int x = 0u; x < characterWidth; ++x)
		{
			ocean_assert(characterData < data_ + 2 + 32);

			const unsigned int xFrame = (unsigned int)(left + int(x));

			if (xFrame < frame.width() && yFrame < frame.height()) // due to the explicit cast from `int` to `unsigned int` we check for negative coordinates as well
			{
				const bool activePixel = (*characterData & (1u << bitCounter)) != 0;

				if (activePixel)
				{
					memcpy(frame.pixel<void>(xFrame, yFrame), foregroundColor, channels);
				}
				else if (backgroundColor != nullptr)
				{
					memcpy(frame.pixel<void>(xFrame, yFrame), backgroundColor, channels);
				}
			}

			if (++bitCounter >= 8u)
			{
				bitCounter = 0u;
				++characterData;
			}
		}
	}

	return true;
}

unsigned int Canvas::Font::Character::width() const
{
	return (unsigned int)(data_[0]);
}

unsigned int Canvas::Font::Character::height() const
{
	return (unsigned int)(data_[1]);
}

bool Canvas::Font::Character::isValid() const
{
	return data_[0] >= 1u && data_[0] <= 16u && data_[1] >= 1u && data_[1] <= 16u;
}

Canvas::Font::Font()
{
	// the font data, one line per character
	const std::vector<uint8_t> values =
	{
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x66, 0x66, 0x66, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0xCC, 0xF3, 0x3C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x36, 0x36, 0x7F, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x66, 0x66, 0x06, 0x3C, 0x60, 0x60, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0B, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xBC, 0xB1, 0xCD, 0x6C, 0xC3, 0x0D, 0xB0, 0xC3, 0x36, 0xB3, 0x8D, 0x3D, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0xC0, 0xC1, 0x86, 0x0D, 0x1B, 0x1C, 0x1C, 0x6C, 0x99, 0x33, 0xC3, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0xC0, 0x66, 0x66, 0x66, 0x66, 0x66, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x30, 0x66, 0x66, 0x66, 0x66, 0x66, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x30, 0x3F, 0xE3, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0xC0, 0xCC, 0x6C, 0x66, 0x36, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x18, 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x06, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x60, 0x38, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x60, 0x70, 0x78, 0x78, 0x6C, 0x6C, 0x66, 0x7E, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x7E, 0x06, 0x06, 0x06, 0x3E, 0x66, 0x60, 0x60, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x7E, 0x60, 0x30, 0x30, 0x18, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x60, 0x06, 0x00, 0x60, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x60, 0x30, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xE0, 0x1C, 0x0C, 0x0C, 0x73, 0x63, 0xB6, 0x99, 0x6D, 0x36, 0x9B, 0x6D, 0x66, 0x9B, 0xB1, 0x3D, 0x0C, 0x00, 0x8E, 0x03, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x24, 0x66, 0x66, 0x7E, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x86, 0x19, 0x66, 0x98, 0x3F, 0x86, 0x19, 0x66, 0x98, 0x61, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0xC0, 0xC3, 0xCC, 0x90, 0x01, 0x03, 0x06, 0x0C, 0x18, 0x62, 0x86, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x80, 0x1F, 0xC6, 0x18, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x98, 0x31, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0xF0, 0x67, 0xC0, 0x80, 0x01, 0x3F, 0x06, 0x0C, 0x18, 0x30, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0xFE, 0x06, 0x06, 0x06, 0x7E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x8C, 0x19, 0x64, 0x80, 0x01, 0xE6, 0x19, 0x66, 0x18, 0x63, 0x78, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x80, 0x61, 0x86, 0x19, 0x66, 0x98, 0x7F, 0x86, 0x19, 0x66, 0x98, 0x61, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x10, 0x00, 0x00, 0x00, 0x06, 0x83, 0xC1, 0x60, 0x30, 0xD8, 0x6C, 0xE6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0x30, 0x66, 0xC6, 0x86, 0x07, 0x07, 0x1E, 0x6C, 0x98, 0x31, 0x66, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x06, 0xE6, 0x70, 0x0E, 0xE7, 0x79, 0x9E, 0x67, 0x6F, 0xF6, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x80, 0x61, 0x8E, 0x79, 0xE6, 0x99, 0x6D, 0xB6, 0x99, 0x67, 0x9E, 0x71, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xCC, 0x18, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0xF0, 0x67, 0xD8, 0xB0, 0x61, 0xC3, 0xFE, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xCC, 0x18, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x1E, 0x33, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x86, 0x19, 0x66, 0x98, 0x61, 0xFE, 0x18, 0x66, 0x98, 0x61, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0xE0, 0x63, 0xCC, 0x98, 0x01, 0x0E, 0x70, 0x80, 0x19, 0x33, 0xC6, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x80, 0x61, 0x86, 0x19, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0x66, 0x66, 0x66, 0x24, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0xC3, 0xC3, 0xF0, 0x30, 0x6C, 0x9E, 0x99, 0x67, 0x2C, 0x0D, 0xCF, 0x83, 0x61, 0x60, 0x18, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0x18, 0x3C, 0xD8, 0x18, 0x1B, 0x1C, 0x38, 0xD8, 0x18, 0x1B, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x03, 0x1B, 0xC6, 0x0C, 0x1E, 0x30, 0xC0, 0x00, 0x03, 0x0C, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0xE0, 0x66, 0x66, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x30, 0x33, 0x63, 0x66, 0xC6, 0xCC, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x70, 0x66, 0x66, 0x66, 0x66, 0x66, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x00, 0xE2, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x38, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x78, 0x6C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xCC, 0x06, 0x83, 0xC1, 0xCC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x7E, 0x06, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0xC0, 0x66, 0x6F, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x06, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x06, 0x66, 0x66, 0x66, 0x66, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x10, 0x00, 0x00, 0xC0, 0x60, 0x30, 0x98, 0x6D, 0x1E, 0x87, 0xC7, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x63, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x00, 0x00, 0x80, 0x77, 0xC6, 0x18, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x06, 0x3C, 0x60, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x6F, 0x66, 0x66, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xF0, 0xCC, 0xB6, 0xD9, 0xE6, 0x1F, 0x33, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x00, 0xCC, 0x18, 0x63, 0xCC, 0x30, 0xC6, 0x18, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x80, 0x61, 0x8C, 0x31, 0x86, 0x19, 0x63, 0x8C, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x80, 0xDB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x06, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x3C, 0x76, 0x16, 0x16, 0x0E, 0x6E, 0x3C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x1C, 0x36, 0x06, 0x06, 0x0C, 0x1E, 0x0C, 0x0C, 0x66, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x66, 0x3C, 0x24, 0x24, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0x66, 0x66, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x66, 0x66, 0x06, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x1C, 0x1C, 0x36, 0x6C, 0x38, 0x38, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x80, 0xBD, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x86, 0xCD, 0xBC, 0xF4, 0xC2, 0x0B, 0x2F, 0x3D, 0xB3, 0x61, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x00, 0x82, 0x98, 0x62, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0xB6, 0x8D, 0x8D, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x86, 0xED, 0xBC, 0xF4, 0xD2, 0x3B, 0xAF, 0xBC, 0xB4, 0x61, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x00, 0xA7, 0x94, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0xCD, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x6D, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x70, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xFE, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x10, 0x00, 0x00, 0x80, 0xE7, 0xF3, 0xF9, 0x7C, 0x3C, 0x18, 0x0C, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x60, 0x67, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x10, 0x00, 0x00, 0xA7, 0x94, 0x72, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0xB6, 0x6D, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0B, 0x10, 0x00, 0x00, 0x00, 0x00, 0x18, 0xEC, 0x30, 0xC6, 0x30, 0x83, 0x0D, 0x30, 0xC3, 0x1C, 0xB3, 0x8C, 0x37, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0B, 0x10, 0x00, 0x00, 0x00, 0x00, 0x18, 0xEC, 0x30, 0xC6, 0x30, 0x83, 0x0D, 0xB0, 0xC1, 0x1A, 0xC3, 0x0C, 0x33, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0B, 0x10, 0x00, 0x00, 0x00, 0x00, 0x18, 0xAC, 0x31, 0xC6, 0x68, 0x83, 0x0D, 0x30, 0xC3, 0x1C, 0xB3, 0x8C, 0x37, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x0C, 0x06, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x1C, 0x18, 0x30, 0x18, 0x18, 0x3C, 0x3C, 0x24, 0x66, 0x66, 0x7E, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x38, 0x18, 0x0C, 0x18, 0x18, 0x3C, 0x3C, 0x24, 0x66, 0x66, 0x7E, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x18, 0x3C, 0x66, 0x18, 0x18, 0x3C, 0x3C, 0x24, 0x66, 0x66, 0x7E, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x5E, 0x7A, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x24, 0x66, 0x66, 0x7E, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x66, 0x66, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x24, 0x66, 0x66, 0x7E, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x18, 0x3C, 0x18, 0x00, 0x18, 0x18, 0x3C, 0x24, 0x66, 0x66, 0x7E, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0D, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x87, 0x07, 0xD8, 0x00, 0x1B, 0x60, 0x3F, 0x66, 0xC0, 0x0C, 0xF8, 0x81, 0x31, 0x30, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0xC0, 0xC3, 0xCC, 0x90, 0x01, 0x03, 0x06, 0x0C, 0x18, 0x62, 0x86, 0x07, 0x06, 0x18, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x38, 0x60, 0x80, 0xF1, 0x67, 0xC0, 0x80, 0x01, 0x3F, 0x06, 0x0C, 0x18, 0x30, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x70, 0x60, 0x60, 0xF0, 0x67, 0xC0, 0x80, 0x01, 0x3F, 0x06, 0x0C, 0x18, 0x30, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x30, 0xF0, 0x30, 0xF3, 0x67, 0xC0, 0x80, 0x01, 0x3F, 0x06, 0x0C, 0x18, 0x30, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0xCC, 0x98, 0x01, 0xF0, 0x67, 0xC0, 0x80, 0x01, 0x3F, 0x06, 0x0C, 0x18, 0x30, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x63, 0x60, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x6C, 0x60, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x96, 0x60, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x09, 0x60, 0x66, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x80, 0x1F, 0xC6, 0x18, 0x66, 0xD8, 0x67, 0x86, 0x19, 0x66, 0x98, 0x31, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0xBC, 0xD0, 0x03, 0x80, 0x61, 0x8E, 0x79, 0xE6, 0x99, 0x6D, 0xB6, 0x99, 0x67, 0x9E, 0x71, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x38, 0xC0, 0x00, 0x06, 0x1E, 0xCC, 0x18, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x70, 0xC0, 0x80, 0x01, 0x1E, 0xCC, 0x18, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x30, 0xE0, 0xC1, 0x0C, 0x1E, 0xCC, 0x18, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0xBC, 0xD0, 0x03, 0x00, 0x1E, 0xCC, 0x18, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0xCC, 0x30, 0x03, 0x00, 0x1E, 0xCC, 0x18, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xCC, 0x18, 0x67, 0x9E, 0x6D, 0xB6, 0x79, 0xE6, 0x18, 0x33, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x38, 0xC0, 0x00, 0x86, 0x61, 0x86, 0x19, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x70, 0xC0, 0x80, 0x81, 0x61, 0x86, 0x19, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x30, 0xE0, 0xC1, 0x0C, 0x00, 0x86, 0x19, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0xCC, 0x30, 0x03, 0x80, 0x61, 0x86, 0x19, 0x66, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0x33, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0A, 0x10, 0x70, 0xC0, 0x80, 0xC1, 0xC0, 0x03, 0x1B, 0xC6, 0x0C, 0x1E, 0x30, 0xC0, 0x00, 0x03, 0x0C, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x10, 0x00, 0x00, 0x00, 0x30, 0x60, 0xC0, 0x8F, 0x31, 0x63, 0xC6, 0x8C, 0xF9, 0x31, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x36, 0x66, 0x66, 0x66, 0x66, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x1C, 0x18, 0x30, 0x00, 0x3C, 0x66, 0x78, 0x6C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x38, 0x18, 0x0C, 0x00, 0x3C, 0x66, 0x78, 0x6C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x18, 0x3C, 0x66, 0x00, 0x3C, 0x66, 0x78, 0x6C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x5E, 0x7A, 0x00, 0x3C, 0x66, 0x78, 0x6C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x3C, 0x66, 0x78, 0x6C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x18, 0x3C, 0x18, 0x00, 0x3C, 0x66, 0x78, 0x6C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x63, 0x66, 0xF8, 0xC7, 0x06, 0x66, 0x60, 0x66, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xCC, 0x06, 0x83, 0xC1, 0xCC, 0xC3, 0xC0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x1C, 0x18, 0x30, 0x00, 0x3C, 0x66, 0x7E, 0x06, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x38, 0x18, 0x0C, 0x00, 0x3C, 0x66, 0x7E, 0x06, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x18, 0x3C, 0x66, 0x00, 0x3C, 0x66, 0x7E, 0x06, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x3C, 0x66, 0x7E, 0x06, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x67, 0x0C, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x6E, 0x03, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0xF6, 0x00, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x10, 0x00, 0x90, 0x09, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x6E, 0x18, 0x36, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x5E, 0x7A, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x1C, 0x18, 0x30, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x38, 0x18, 0x0C, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x18, 0x3C, 0x66, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x5E, 0x7A, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x00, 0x1E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x76, 0x76, 0x66, 0x6E, 0x6E, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x1C, 0x18, 0x30, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x38, 0x18, 0x0C, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x18, 0x3C, 0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x38, 0x18, 0x0C, 0x00, 0xC3, 0xC3, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0xC3, 0xC3, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	ocean_assert(values.size() == 256 * sizeof(Character));

	if (values.size() == 256 * sizeof(Character))
	{
		characters_.resize(256);
		memcpy(characters_.data(), values.data(), 256 * sizeof(Character));
	}
}

bool Canvas::Font::drawText(Frame& frame, const std::string& text, const int left, const int top, const uint8_t* foregroundColor, const uint8_t* backgroundColor) const
{
	ocean_assert(frame.isValid() && frame.pixelOrigin() == FrameType::ORIGIN_UPPER_LEFT);
	ocean_assert(FrameType::formatIsGeneric(frame.pixelFormat()));
	ocean_assert(frame.dataType() == FrameType::DT_UNSIGNED_INTEGER_8);

	ocean_assert(characters_.size() == 256);
	if (characters_.size() < 256)
	{
		return false;
	}

	if (!frame.isValid() || frame.pixelOrigin() != FrameType::ORIGIN_UPPER_LEFT || !FrameType::formatIsGeneric(frame.pixelFormat()) || frame.numberPlanes() != 1u || frame.dataType() != FrameType::DT_UNSIGNED_INTEGER_8)
	{
		return false;
	}

	int currentLeft = left;
	int currentTop = top;

	for (size_t n = 0; n < text.length(); ++n)
	{
		const unsigned int characterValue = text[n];

		if (characterValue >= 256u)
		{
			ocean_assert(false && "Invalid text!");
			return false;
		}

		const Character& character = characters_[characterValue];

		if (characterValue == '\n')
		{
			currentLeft = left;
			currentTop += int(character.height());

			continue;
		}

		character.paint(frame, currentLeft, currentTop, foregroundColor, backgroundColor);

		currentLeft += int(character.width());
	}

	return true;
}

bool Canvas::Font::textExtent(const std::string& text, unsigned int& width, unsigned int& height) const
{
	width = 0u;
	height = 0u;

	ocean_assert(characters_.size() == 256);
	if (characters_.size() < 256)
	{
		return false;
	}

	unsigned int maxWidth = 0u;
	unsigned int maxHeight = 0u;

	unsigned int left = 0u;
	unsigned int top = 0u;

	for (size_t n = 0; n < text.length(); ++n)
	{
		const unsigned int characterValue = text[n];

		if (characterValue >= 256u)
		{
			ocean_assert(false && "Invalid text!");
			return false;
		}

		const Character& character = characters_[characterValue];

		if (characterValue == '\n')
		{
			left = 0u;
			top += character.height();

			continue;
		}

		left += character.width();

		maxWidth = std::max(maxWidth, left);
		maxHeight = std::max(maxHeight, top + character.height());
	}

	width = maxWidth;
	height = maxHeight;

	return true;
}

const uint8_t* Canvas::white(const FrameType::PixelFormat pixelFormat)
{
	switch ((std::underlying_type<FrameType::PixelFormat>::type)(pixelFormat))
	{
		case FrameType::FORMAT_RGB24:
		case FrameType::FORMAT_BGR24:
		case FrameType::genericPixelFormat<uint8_t, 3u>():
		{
			static uint8_t values[3] = {0xFF, 0xFF, 0xFF};
			return values;
		}

		case FrameType::FORMAT_RGBA32:
		case FrameType::FORMAT_BGRA32:
		case FrameType::genericPixelFormat<uint8_t, 4u>():
		{
			static uint8_t values[4] = {0xFF, 0xFF, 0xFF, 0xFF};
			return values;
		}

		case FrameType::FORMAT_Y8:
		case FrameType::genericPixelFormat<uint8_t, 1u>():
		{
			static uint8_t values[1] = {0xFF};
			return values;
		}

		case FrameType::FORMAT_YA16:
		case FrameType::genericPixelFormat<uint8_t, 2u>():
		{
			static uint8_t values[2] = {0xFF, 0xFF};
			return values;
		}

		default:
			break;
	}

	ocean_assert(false && "Invalid pixel format!");
	return memoryBlock32Byte();
}

const uint8_t* Canvas::black(const FrameType::PixelFormat pixelFormat)
{
	switch ((std::underlying_type<FrameType::PixelFormat>::type)(pixelFormat))
	{
		case FrameType::FORMAT_RGB24:
		case FrameType::FORMAT_BGR24:
		case FrameType::genericPixelFormat<uint8_t, 3u>():
		{
			static uint8_t values[3] = {0x00, 0x00, 0x00};
			return values;
		}

		case FrameType::FORMAT_RGBA32:
		case FrameType::FORMAT_BGRA32:
		case FrameType::genericPixelFormat<uint8_t, 4u>():
		{
			static uint8_t values[4] = {0x00, 0x00, 0x00, 0xFF};
			return values;
		}

		case FrameType::FORMAT_Y8:
		case FrameType::genericPixelFormat<uint8_t, 1u>():
		{
			static uint8_t values[1] = {0x00};
			return values;
		}

		case FrameType::FORMAT_YA16:
		case FrameType::genericPixelFormat<uint8_t, 2u>():
		{
			static uint8_t values[2] = {0x00, 0xFF};
			return values;
		}

		default:
			break;
	}

	ocean_assert(false && "Invalid pixel format!");
	return memoryBlock32Byte();
}

const uint8_t* Canvas::gray(const FrameType::PixelFormat pixelFormat)
{
	switch ((std::underlying_type<FrameType::PixelFormat>::type)(pixelFormat))
	{
		case FrameType::FORMAT_RGB24:
		case FrameType::FORMAT_BGR24:
		case FrameType::genericPixelFormat<uint8_t, 3u>():
		{
			static uint8_t values[3] = {0x80, 0x80, 0x80};
			return values;
		}

		case FrameType::FORMAT_RGBA32:
		case FrameType::FORMAT_BGRA32:
		case FrameType::genericPixelFormat<uint8_t, 4u>():
		{
			static uint8_t values[4] = {0x80, 0x80, 0x80, 0xFF};
			return values;
		}

		case FrameType::FORMAT_Y8:
		case FrameType::genericPixelFormat<uint8_t, 1u>():
		{
			static uint8_t values[1] = {0x80};
			return values;
		}

		case FrameType::FORMAT_YA16:
		case FrameType::genericPixelFormat<uint8_t, 2u>():
		{
			static uint8_t values[2] = {0x80, 0xFF};
			return values;
		}

		default:
			break;
	}

	ocean_assert(false && "Invalid pixel format!");
	return memoryBlock32Byte();
}

const uint8_t* Canvas::red(const FrameType::PixelFormat pixelFormat)
{
	switch ((std::underlying_type<FrameType::PixelFormat>::type)(pixelFormat))
	{
		case FrameType::FORMAT_RGB24:
		case FrameType::genericPixelFormat<uint8_t, 3u>():
		{
			static uint8_t values[3] = {0xFF, 0x00, 0x00};
			return values;
		}

		case FrameType::FORMAT_BGR24:
		{
			static uint8_t values[3] = {0x00, 0x00, 0xFF};
			return values;
		}

		case FrameType::FORMAT_RGBA32:
		case FrameType::genericPixelFormat<uint8_t, 4u>():
		{
			static uint8_t values[4] = {0xFF, 0x00, 0x00, 0xFF};
			return values;
		}

		case FrameType::FORMAT_BGRA32:
		{
			static uint8_t values[4] = {0x00, 0x00, 0xFF, 0xFF};
			return values;
		}

		case FrameType::FORMAT_Y8:
		{
			// Y = R * 0.299 + G * 0.587 + B * 0.114
			static uint8_t values[1] = {76u};
			return values;
		}

		case FrameType::FORMAT_YA16:
		{
			// Y = R * 0.299 + G * 0.587 + B * 0.114
			static uint8_t values[2] = {76u, 0xFF};
			return values;
		}

		default:
			break;
	}

	ocean_assert(false && "Invalid pixel format!");
	return memoryBlock32Byte();
}

const uint8_t* Canvas::green(const FrameType::PixelFormat pixelFormat)
{
	switch ((std::underlying_type<FrameType::PixelFormat>::type)(pixelFormat))
	{
		case FrameType::FORMAT_RGB24:
		case FrameType::FORMAT_BGR24:
		case FrameType::genericPixelFormat<uint8_t, 3u>():
		{
			static uint8_t values[3] = {0x00, 0xFF, 0x00};
			return values;
		}

		case FrameType::FORMAT_RGBA32:
		case FrameType::FORMAT_BGRA32:
		case FrameType::genericPixelFormat<uint8_t, 4u>():
		{
			static uint8_t values[4] = {0x00, 0xFF, 0x00, 0xFF};
			return values;
		}

		case FrameType::FORMAT_Y8:
		{
			// Y = R * 0.299 + G * 0.587 + B * 0.114
			static uint8_t values[1] = {150u};
			return values;
		}

		case FrameType::FORMAT_YA16:
		{
			// Y = R * 0.299 + G * 0.587 + B * 0.114
			static uint8_t values[2] = {150u, 0xFF};
			return values;
		}

		default:
			break;
	}

	ocean_assert(false && "Invalid pixel format!");
	return memoryBlock32Byte();
}

const uint8_t* Canvas::blue(const FrameType::PixelFormat pixelFormat)
{
	switch ((std::underlying_type<FrameType::PixelFormat>::type)(pixelFormat))
	{
		case FrameType::FORMAT_RGB24:
		case FrameType::genericPixelFormat<uint8_t, 3u>():
		{
			static uint8_t values[3] = {0x00, 0x00, 0xFF};
			return values;
		}

		case FrameType::FORMAT_BGR24:
		{
			static uint8_t values[3] = {0xFF, 0x00, 0x00};
			return values;
		}

		case FrameType::FORMAT_RGBA32:
		case FrameType::genericPixelFormat<uint8_t, 4u>():
		{
			static uint8_t values[4] = {0x00, 0x00, 0xFF, 0xFF};
			return values;
		}

		case FrameType::FORMAT_BGRA32:
		{
			static uint8_t values[4] = {0xFF, 0x00, 0x00, 0xFF};
			return values;
		}

		case FrameType::FORMAT_Y8:
		{
			// Y = R * 0.299 + G * 0.587 + B * 0.114
			static uint8_t values[1] = {29u};
			return values;
		}

		case FrameType::FORMAT_YA16:
		{
			// Y = R * 0.299 + G * 0.587 + B * 0.114
			static uint8_t values[2] = {29u, 0xFF};
			return values;
		}

		default:
			break;
	}

	ocean_assert(false && "Invalid pixel format!");
	return memoryBlock32Byte();
}

const uint8_t* Canvas::yellow(const FrameType::PixelFormat pixelFormat)
{
	switch ((std::underlying_type<FrameType::PixelFormat>::type)(pixelFormat))
	{
		case FrameType::FORMAT_RGB24:
		case FrameType::genericPixelFormat<uint8_t, 3u>():
		{
			static uint8_t values[3] = {0xFF, 0xFF, 0x00};
			return values;
		}

		case FrameType::FORMAT_BGR24:
		{
			static uint8_t values[3] = {0x00, 0xFF, 0xFF};
			return values;
		}

		case FrameType::FORMAT_RGBA32:
		case FrameType::genericPixelFormat<uint8_t, 4u>():
		{
			static uint8_t values[4] = {0xFF, 0xFF, 0x00, 0xFF};
			return values;
		}

		case FrameType::FORMAT_BGRA32:
		{
			static uint8_t values[4] = {0x00, 0xFF, 0xFF, 0xFF};
			return values;
		}

		case FrameType::FORMAT_Y8:
		{
			// Y = R * 0.299 + G * 0.587 + B * 0.114
			static uint8_t values[1] = {226u};
			return values;
		}

		case FrameType::FORMAT_YA16:
		{
			// Y = R * 0.299 + G * 0.587 + B * 0.114
			static uint8_t values[2] = {226u, 0xFF};
			return values;
		}

		default:
			break;
	}

	ocean_assert(false && "Invalid pixel format!");
	return memoryBlock32Byte();
}

bool Canvas::line(Frame& frame, const int xStart, const int yStart, const int xEnd, const int yEnd, const uint8_t* value)
{
	ocean_assert(frame.isValid());

	if (frame.numberPlanes() == 1u && frame.dataType() == FrameType::DT_UNSIGNED_INTEGER_8)
	{
		switch (frame.channels())
		{
			case 1u:
				line8BitPerChannel<1u>(frame.data<uint8_t>(), frame.width(), frame.height(), xStart, yStart, xEnd, yEnd, value, frame.paddingElements());
				return true;

			case 2u:
				line8BitPerChannel<2u>(frame.data<uint8_t>(), frame.width(), frame.height(), xStart, yStart, xEnd, yEnd, value, frame.paddingElements());
				return true;

			case 3u:
				line8BitPerChannel<3u>(frame.data<uint8_t>(), frame.width(), frame.height(), xStart, yStart, xEnd, yEnd, value, frame.paddingElements());
				return true;

			case 4u:
				line8BitPerChannel<4u>(frame.data<uint8_t>(), frame.width(), frame.height(), xStart, yStart, xEnd, yEnd, value, frame.paddingElements());
				return true;
		}
	}

	ocean_assert(false && "Invalid frame type!");
	return false;
}

bool Canvas::lines(Frame& frame, const PixelPosition* positions, const unsigned int numberPositions, const uint8_t* value)
{
	ocean_assert(frame.isValid());

	if (frame.numberPlanes() == 1u && frame.dataType() == FrameType::DT_UNSIGNED_INTEGER_8)
	{
		switch (frame.channels())
		{
			case 1u:
				lines8BitPerChannel<1u>(frame.data<uint8_t>(), frame.width(), frame.height(), positions, numberPositions, value, frame.paddingElements());
				return true;

			case 2u:
				lines8BitPerChannel<2u>(frame.data<uint8_t>(), frame.width(), frame.height(), positions, numberPositions, value, frame.paddingElements());
				return true;

			case 3u:
				lines8BitPerChannel<3u>(frame.data<uint8_t>(), frame.width(), frame.height(), positions, numberPositions, value, frame.paddingElements());
				return true;

			case 4u:
				lines8BitPerChannel<4u>(frame.data<uint8_t>(), frame.width(), frame.height(), positions, numberPositions, value, frame.paddingElements());
				return true;
		}
	}

	ocean_assert(false && "Invalid frame type!");
	return false;
}

bool Canvas::ellipse(Frame& frame, const PixelPosition& position, const unsigned int horizontal, const unsigned int vertical, const uint8_t* value)
{
	ocean_assert(frame.isValid());

	if (frame.numberPlanes() == 1u && frame.dataType() == FrameType::DT_UNSIGNED_INTEGER_8)
	{
		switch (frame.channels())
		{
			case 1u:
				ellipse8BitPerChannel<1u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, horizontal, vertical, value, frame.paddingElements());
				return true;

			case 2u:
				ellipse8BitPerChannel<2u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, horizontal, vertical, value, frame.paddingElements());
				return true;

			case 3u:
				ellipse8BitPerChannel<3u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, horizontal, vertical, value, frame.paddingElements());
				return true;

			case 4u:
				ellipse8BitPerChannel<4u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, horizontal, vertical, value, frame.paddingElements());
				return true;
		}
	}

	ocean_assert(false && "Invalid frame type!");
	return false;
}

bool Canvas::rotatedEllipse(Frame& frame, const PixelPosition& position, const unsigned int horizontal, const unsigned int vertical, const Scalar angle, const uint8_t* value)
{
	ocean_assert(frame.isValid());

	ocean_assert(horizontal % 2u == 1u);
	ocean_assert(vertical % 2u == 1u);

	const unsigned int horizontal_2 = max(1u, horizontal / 2u);
	const unsigned int vertical_2 = max(1u, vertical / 2u);

	if (frame.numberPlanes() == 1u && frame.dataType() == FrameType::DT_UNSIGNED_INTEGER_8)
	{
		switch (frame.channels())
		{
			case 1u:
				rotatedEllipse8BitPerChannel<1u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, horizontal_2, vertical_2, angle, value, frame.paddingElements());
				return true;

			case 2u:
				rotatedEllipse8BitPerChannel<2u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, horizontal_2, vertical_2, angle, value, frame.paddingElements());
				return true;

			case 3u:
				rotatedEllipse8BitPerChannel<3u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, horizontal_2, vertical_2, angle, value, frame.paddingElements());
				return true;

			case 4u:
				rotatedEllipse8BitPerChannel<4u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, horizontal_2, vertical_2, angle, value, frame.paddingElements());
				return true;
		}
	}

	ocean_assert(false && "Invalid frame type!");
	return false;
}

bool Canvas::rectangle(Frame& frame, const int left, const int top, const unsigned int xSize, const unsigned int ySize, const uint8_t* value)
{
	ocean_assert(frame.isValid());

	if (xSize == 0u || ySize == 0u)
	{
		return true;
	}

	if (frame.numberPlanes() == 1u && frame.dataType() == FrameType::DT_UNSIGNED_INTEGER_8)
	{
		switch (frame.channels())
		{
			case 1u:
				rectangle8BitPerChannel<1u>(frame.data<uint8_t>(), frame.width(), frame.height(), left, top, xSize, ySize, value, frame.paddingElements());
				return true;

			case 2u:
				rectangle8BitPerChannel<2u>(frame.data<uint8_t>(), frame.width(), frame.height(), left, top, xSize, ySize, value, frame.paddingElements());
				return true;

			case 3u:
				rectangle8BitPerChannel<3u>(frame.data<uint8_t>(), frame.width(), frame.height(), left, top, xSize, ySize, value, frame.paddingElements());
				return true;

			case 4u:
				rectangle8BitPerChannel<4u>(frame.data<uint8_t>(), frame.width(), frame.height(), left, top, xSize, ySize, value, frame.paddingElements());
				return true;
		}
	}

	ocean_assert(false && "Invalid frame type!");
	return false;
}

bool Canvas::fill(Frame& frame, const PixelPosition& position, const uint8_t* value)
{
	ocean_assert(frame.isValid());
	ocean_assert(position.x() < frame.width() && position.y() < frame.height());

	if (frame.numberPlanes() == 1u && frame.dataType() == FrameType::DT_UNSIGNED_INTEGER_8)
	{
		switch (frame.channels())
		{
			case 1u:
				fill8BitPerChannel<1u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, value, frame.paddingElements());
				return true;

			case 2u:
				fill8BitPerChannel<2u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, value, frame.paddingElements());
				return true;

			case 3u:
				fill8BitPerChannel<3u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, value, frame.paddingElements());
				return true;

			case 4u:
				fill8BitPerChannel<4u>(frame.data<uint8_t>(), frame.width(), frame.height(), position, value, frame.paddingElements());
				return true;
		}
	}

	ocean_assert(false && "Invalid frame type!");
	return false;
}

bool Canvas::drawText(Frame& frame, const std::string& text, const int left, const int top, const uint8_t* foregroundColor, const uint8_t* backgroundColor)
{
	return Font::get().drawText(frame, text, left, top, foregroundColor, backgroundColor);
}

bool Canvas::textExtent(const std::string& text, unsigned int& width, unsigned int& height)
{
	return Font::get().textExtent(text, width, height);
}

const uint8_t* Canvas::memoryBlock32Byte()
{
	static uint8_t values[32] = {0};
	return values;
}

}

}
