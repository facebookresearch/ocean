diff --git a/3rdparty/everest/CMakeLists.txt b/3rdparty/everest/CMakeLists.txt
index e0e5adec..cdb6accb 100644
--- a/3rdparty/everest/CMakeLists.txt
+++ b/3rdparty/everest/CMakeLists.txt
@@ -1,6 +1,6 @@
 set(everest_target "${MBEDTLS_TARGET_PREFIX}everest")
 
-add_library(${everest_target}
+add_library(${everest_target} STATIC
   library/everest.c
   library/x25519.c
   library/Hacl_Curve25519_joined.c)
diff --git a/3rdparty/p256-m/CMakeLists.txt b/3rdparty/p256-m/CMakeLists.txt
index 2ef0d48b..54653af6 100644
--- a/3rdparty/p256-m/CMakeLists.txt
+++ b/3rdparty/p256-m/CMakeLists.txt
@@ -1,6 +1,6 @@
 set(p256m_target ${MBEDTLS_TARGET_PREFIX}p256m)
 
-add_library(${p256m_target}
+add_library(${p256m_target} STATIC
     p256-m_driver_entrypoints.c
     p256-m/p256-m.c)
 
diff --git a/include/mbedtls/mbedtls_config.h b/include/mbedtls/mbedtls_config.h
index 35921412..9a6d50e9 100644
--- a/include/mbedtls/mbedtls_config.h
+++ b/include/mbedtls/mbedtls_config.h
@@ -2249,7 +2249,7 @@
  *
  * This modules adds support for the AES-NI instructions on x86.
  */
-#define MBEDTLS_AESNI_C
+//#define MBEDTLS_AESNI_C
 
 /**
  * \def MBEDTLS_AESCE_C
diff --git a/include/mbedtls/x509_crt.h b/include/mbedtls/x509_crt.h
index 1ce0d236..af11cf80 100644
--- a/include/mbedtls/x509_crt.h
+++ b/include/mbedtls/x509_crt.h
@@ -17,6 +17,17 @@
 #include "mbedtls/x509_crl.h"
 #include "mbedtls/bignum.h"
 
+#undef DLLEXPORT
+#if defined(_MSC_VER) && defined(OCEAN_RUNTIME_SHARED)
+#ifdef mbedx509_EXPORTS
+#define DLLEXPORT __declspec(dllexport)
+#else
+#define DLLEXPORT __declspec(dllimport)
+#endif
+#else
+#define DLLEXPORT
+#endif
+
 /**
  * \addtogroup x509_module
  * \{
@@ -321,7 +332,7 @@ typedef void mbedtls_x509_crt_restart_ctx;
  * new algorithms are added to the library. New minor versions of Mbed TLS will
  * not reduce this profile unless serious security concerns require it.
  */
-extern const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_default;
+DLLEXPORT extern const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_default;
 
 /**
  * Expected next default profile. Recommended for new deployments.
@@ -333,7 +344,7 @@ extern const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_next;
 /**
  * NSA Suite B profile.
  */
-extern const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_suiteb;
+DLLEXPORT extern const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_suiteb;
 
 /**
  * Empty profile that allows nothing. Useful as a basis for constructing
diff --git a/library/CMakeLists.txt b/library/CMakeLists.txt
index e6705de5..0f673820 100644
--- a/library/CMakeLists.txt
+++ b/library/CMakeLists.txt
@@ -3,6 +3,8 @@ option(USE_SHARED_MBEDTLS_LIBRARY "Build Mbed TLS shared library." OFF)
 option(LINK_WITH_PTHREAD "Explicitly link Mbed TLS library to pthread." OFF)
 option(LINK_WITH_TRUSTED_STORAGE "Explicitly link Mbed TLS library to trusted_storage." OFF)
 
+set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+
 # Set the project root directory if it's not already defined, as may happen if
 # the library folder is included directly by a parent project, without
 # including the top level CMakeLists.txt.
@@ -298,7 +300,7 @@ endif(USE_STATIC_MBEDTLS_LIBRARY)
 if(USE_SHARED_MBEDTLS_LIBRARY)
     set(CMAKE_LIBRARY_PATH ${CMAKE_CURRENT_BINARY_DIR})
     add_library(${mbedcrypto_target} SHARED ${src_crypto})
-    set_target_properties(${mbedcrypto_target} PROPERTIES VERSION 3.6.0 SOVERSION 16)
+    #set_target_properties(${mbedcrypto_target} PROPERTIES VERSION 3.6.0 SOVERSION 16)
     target_link_libraries(${mbedcrypto_target} PUBLIC ${libs})
 
     if(TARGET ${everest_target})
@@ -310,11 +312,11 @@ if(USE_SHARED_MBEDTLS_LIBRARY)
     endif()
 
     add_library(${mbedx509_target} SHARED ${src_x509})
-    set_target_properties(${mbedx509_target} PROPERTIES VERSION 3.6.0 SOVERSION 7)
+    #set_target_properties(${mbedx509_target} PROPERTIES VERSION 3.6.0 SOVERSION 7)
     target_link_libraries(${mbedx509_target} PUBLIC ${libs} ${mbedcrypto_target})
 
     add_library(${mbedtls_target} SHARED ${src_tls})
-    set_target_properties(${mbedtls_target} PROPERTIES VERSION 3.6.0 SOVERSION 21)
+    #set_target_properties(${mbedtls_target} PROPERTIES VERSION 3.6.0 SOVERSION 21)
     target_link_libraries(${mbedtls_target} PUBLIC ${libs} ${mbedx509_target})
 endif(USE_SHARED_MBEDTLS_LIBRARY)
 
diff --git a/library/constant_time.c b/library/constant_time.c
index d212ddfd..391dc8da 100644
--- a/library/constant_time.c
+++ b/library/constant_time.c
@@ -27,7 +27,7 @@
  * has the value zero (because it is volatile, it "may be modified in ways unknown to
  * the implementation").
  */
-volatile mbedtls_ct_uint_t mbedtls_ct_zero = 0;
+DLLEXPORT volatile mbedtls_ct_uint_t mbedtls_ct_zero = 0;
 #endif
 
 /*
diff --git a/library/constant_time_impl.h b/library/constant_time_impl.h
index 2a4574ba..0c3e19f4 100644
--- a/library/constant_time_impl.h
+++ b/library/constant_time_impl.h
@@ -16,6 +16,17 @@
 #include "mbedtls/bignum.h"
 #endif
 
+#undef DLLEXPORT
+#if defined(_MSC_VER) && defined(OCEAN_RUNTIME_SHARED)
+#if defined(mbedcrypto_EXPORTS)
+#define DLLEXPORT __declspec(dllexport)
+#else
+#define DLLEXPORT __declspec(dllimport)
+#endif
+#else
+#define DLLEXPORT
+#endif
+
 /*
  * To improve readability of constant_time_internal.h, the static inline
  * definitions are here, and constant_time_internal.h has only the declarations.
@@ -81,7 +92,7 @@
  */
 
 #if !defined(MBEDTLS_CT_ASM)
-extern volatile mbedtls_ct_uint_t mbedtls_ct_zero;
+DLLEXPORT extern volatile mbedtls_ct_uint_t mbedtls_ct_zero;
 #endif
 
 /**
diff --git a/library/psa_util_internal.h b/library/psa_util_internal.h
index 70a08a02..cff832c3 100644
--- a/library/psa_util_internal.h
+++ b/library/psa_util_internal.h
@@ -11,6 +11,17 @@
 #ifndef MBEDTLS_PSA_UTIL_INTERNAL_H
 #define MBEDTLS_PSA_UTIL_INTERNAL_H
 
+#undef DLLEXPORT
+#if defined(_MSC_VER) && defined(OCEAN_RUNTIME_SHARED)
+#if defined(mbedcrypto_EXPORTS)
+#define DLLEXPORT __declspec(dllexport)
+#else
+#define DLLEXPORT __declspec(dllimport)
+#endif
+#else
+#define DLLEXPORT
+#endif
+
 /* Include the public header so that users only need one include. */
 #include "mbedtls/psa_util.h"
 
@@ -61,7 +72,7 @@ extern const mbedtls_error_pair_t psa_to_lms_errors[3];
 #endif
 
 #if defined(MBEDTLS_USE_PSA_CRYPTO) || defined(MBEDTLS_SSL_PROTO_TLS1_3)
-extern const mbedtls_error_pair_t psa_to_ssl_errors[7];
+DLLEXPORT extern const mbedtls_error_pair_t psa_to_ssl_errors[7];
 #endif
 
 #if defined(PSA_WANT_KEY_TYPE_RSA_PUBLIC_KEY) ||    \
diff --git a/library/x509_crt.c b/library/x509_crt.c
index 2fd56fbd..437dd23f 100644
--- a/library/x509_crt.c
+++ b/library/x509_crt.c
@@ -42,6 +42,17 @@
 
 #include "mbedtls/platform.h"
 
+#undef DLLEXPORT
+#if defined(_MSC_VER) && defined(OCEAN_RUNTIME_SHARED)
+#ifdef mbedx509_EXPORTS
+#define DLLEXPORT __declspec(dllexport)
+#else
+#define DLLEXPORT __declspec(dllimport)
+#endif
+#else
+#define DLLEXPORT
+#endif
+
 #if defined(MBEDTLS_THREADING_C)
 #include "mbedtls/threading.h"
 #endif
@@ -84,7 +95,7 @@ typedef struct {
 
 /* Default profile. Do not remove items unless there are serious security
  * concerns. */
-const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_default =
+DLLEXPORT const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_default =
 {
     /* Hashes from SHA-256 and above. Note that this selection
      * should be aligned with ssl_preset_default_hashes in ssl_tls.c. */
@@ -135,7 +146,7 @@ const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_next =
 /*
  * NSA Suite B Profile
  */
-const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_suiteb =
+DLLEXPORT const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_suiteb =
 {
     /* Only SHA-256 and 384 */
     MBEDTLS_X509_ID_FLAG(MBEDTLS_MD_SHA256) |
