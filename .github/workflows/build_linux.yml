# This workflow builds and tests Ocean on Linux (release, static)
# Based on : https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build Ocean on Linux (static)

on:
  pull_request:
    branches: [main]
  schedule:
    # Execute this workflow:
    # Mon-Sun, every 24 hours at 6 am (UTC)
    - cron: '0 6 * * *'

env:
  OCEAN_LINK_TYPE: static

  OCEAN_THIRDPARTY_BUILD_PATH: ${{ github.workspace }}/ocean_thirdparty_build
  OCEAN_THIRDPARTY_INSTALL_PATH: ${{ github.workspace }}/ocean_thirdparty_install

  OCEAN_BUILD_PATH: ${{ github.workspace }}/ocean_build
  OCEAN_INSTALL_PATH: ${{ github.workspace }}/ocean_install

jobs:
  build:
    name: Linux (${{ matrix.build_config }}, static)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_config: [debug, release]

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get install -o Acquire::Retries=5 \
            cmake git ninja-build zip libx11-dev libgtk-3-dev \
            liblzma-dev libgl1-mesa-dev libxcb-glx0-dev \
            libdeflate-dev

      - name: Build and install third-party libraries for Ocean
        run: |
          ${{ github.workspace }}/build/cmake/build_thirdparty_linuxunix.sh \
            -i ${{ env.OCEAN_THIRDPARTY_INSTALL_PATH }} \
            -b ${{ env.OCEAN_THIRDPARTY_BUILD_PATH }} \
            -c ${{ matrix.build_config }} \
            -l ${{ env.OCEAN_LINK_TYPE }}

      - name: Build and install Ocean
        run: |
          ${{ github.workspace }}/build/cmake/build_ocean_linuxunix.sh \
            -i ${{ env.OCEAN_INSTALL_PATH }} \
            -b ${{ env.OCEAN_BUILD_PATH }} \
            -c ${{ matrix.build_config }} \
            -l ${{ env.OCEAN_LINK_TYPE }} \
            -t ${{ env.OCEAN_THIRDPARTY_INSTALL_PATH }}

      - name: Upload build artifacts
        if: success() && !matrix.build_config == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ocean-build
          path: ${{ env.OCEAN_BUILD_PATH }}

  test:
    name: Test Linux build (release, static)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        id: download-build-artifacts
        uses: actions/download-artifact@v4
        with:
          name: ocean-build
          path: ${{ env.OCEAN_BUILD_PATH }}

      - name: Run tests
        run: |
          cd ${{ env.OCEAN_BUILD_PATH }}/static_Release
          # We don't need to repopulate the install directory, since it's a static build, but we will get errors if it doesn't exist
          mkdir ${{ env.OCEAN_INSTALL_PATH }}/static_Release
          ctest
